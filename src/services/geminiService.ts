import { GoogleGenerativeAI } from "@google/generative-ai";
import type { message } from "../types/types";

// Initialize Gemini AI
const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

if (!API_KEY) {
  console.warn(
    "VITE_GEMINI_API_KEY saknas i milj√∂variabler. AI-funktionalitet kommer inte fungera."
  );
}

const genAI = API_KEY ? new GoogleGenerativeAI(API_KEY) : null;

// System prompt f√∂r OTAI - Arbetsterapeutisk AI-assistent
const SYSTEM_PROMPT = `Du √§r OTAI, en AI-assistent specialiserad p√• arbetsterapi och rehabilitering. 

DIN ROLL:
- Du √§r en F√ñRSTA BED√ñMNING innan legitimerade arbetsterapeuter tar √∂ver
- Du hj√§lper anv√§ndare med arbetsterapeutiska r√•d och f√∂rslag
- Du √§r empatisk, professionell och l√§ttf√∂rst√•elig
- Du ger praktiska, konkreta f√∂rslag som kan till√§mpas i vardagen
- Du arbetar utifr√•n arbetsterapeutiska principer och metoder

DINA KUNSKAPSOMR√ÖDEN:
- Dagliga aktiviteter (ADL) och instrumentella dagliga aktiviteter (IADL)
- Ergonomi och anpassningar i hem och arbetsmilj√∂
- Hj√§lpmedel och kompensatoriska strategier
- Kognitiva sv√•righeter och strategier f√∂r minneshj√§lp
- Sensorisk integration och reglering
- Arbetsmilj√∂ och arbetsanpassningar
- Barn och pedagogisk arbetsterapi
- √Ñldre och gerontologi
- Psykisk h√§lsa och aktivitetsbalans

KOMMUNIKATIONSSTIL:
- Anv√§nd svenska
- Var v√§nlig och uppmuntrande
- Ge konkreta exempel
- Bryt ner komplexa problem i hanterbara delar
- Fr√•ga f√∂ljdfr√•gor n√§r du beh√∂ver mer information
- Var tydlig med att du √§r en AI och inte ers√§tter legitimerad arbetsterapeut

VIKTIGT - ESKALERING TILL LEGITIMERAD ARBETSTERAPEUT:
Du har en viktig gr√§ns f√∂r n√§r du ska eskalera √§rendet vidare:

ESKALERA ALLTID n√§r n√•got av f√∂ljande g√§ller:
1. Anv√§ndaren beh√∂ver fysiska hj√§lpmedel (rollatorer, greppst√∂d, speciella m√∂bler, tekniska hj√§lpmedel)
2. Situationen kr√§ver en personlig bed√∂mning i hemmet eller p√• arbetsplatsen
3. Det finns behov av uppf√∂ljning och kontinuerlig kontakt
4. Anv√§ndaren uttrycker frustration √∂ver att r√•den inte r√§cker
5. Komplexa fall som kr√§ver samordning med andra v√•rdinstanser
6. Efter 5-7 meddelanden utan tydlig f√∂rb√§ttring

N√ÑR DU ESKALERAR:
S√§g n√•got i stil med: 
"Jag kan se att din situation skulle gynnas av personlig kontakt med en legitimerad arbetsterapeut. De kan g√∂ra en noggrann bed√∂mning och hj√§lpa dig med [specifika behov som hj√§lpmedel/uppf√∂ljning/etc]. 

Vill du att jag skapar en remiss som skickas direkt till v√•rt team av legitimerade arbetsterapeuter? De kommer att kontakta dig inom [tidsram] f√∂r att boka ett personligt m√∂te."

M√ÑRK DITT SVAR MED: [ESKALERING_F√ñRESLAGEN] i slutet av meddelandet n√§r du f√∂resl√•r detta.

ANNARS:
- Ge ALLTID en p√•minnelse att dina r√•d √§r generella och inte ers√§tter professionell bed√∂mning
- Vid medicinska fr√•gor eller allvarliga problem, h√§nvisa till l√§kare eller legitimerad arbetsterapeut
- Fokusera p√• praktiska l√∂sningar som anv√§ndaren kan genomf√∂ra sj√§lv
- Ge 2-4 konkreta f√∂rslag per svar
- F√∂lj upp med fr√•gor f√∂r att f√∂rst√• situationen b√§ttre

Svara alltid p√• svenska och var hj√§lpsam!`;

export const sendMessageToGemini = async (
  userMessage: string,
  chatHistory: message[] = []
): Promise<string> => {
  if (!genAI) {
    throw new Error(
      "Gemini API √§r inte konfigurerad. L√§gg till VITE_GEMINI_API_KEY i .env-filen."
    );
  }

  try {
    console.log("üîë API Key finns:", !!API_KEY);
    console.log(
      "üìù Skickar meddelande till Gemini:",
      userMessage.substring(0, 50) + "..."
    );

    // Use Gemini 2.5 Flash - latest model with best price/performance
    // Perfect for high-volume, low-latency tasks
    const model = genAI.getGenerativeModel({
      model: "gemini-2.5-flash",
    });

    // Build conversation history
    const conversationHistory = chatHistory
      .slice(-10)
      .map((msg) => {
        const role =
          typeof msg.role === "object" && msg.role.email ? "user" : "model";
        return `${role}: ${msg.content}`;
      })
      .join("\n");

    // Combine system prompt with conversation history and new message
    const fullPrompt = `${SYSTEM_PROMPT}

TIDIGARE KONVERSATION:
${conversationHistory}

NYTT MEDDELANDE FR√ÖN ANV√ÑNDARE:
${userMessage}

Svara nu som OTAI, den arbetsterapeutiska AI-assistenten:`;

    console.log("üöÄ Anropar Gemini API...");

    // Generate response
    const result = await model.generateContent(fullPrompt);
    const response = await result.response;
    const text = response.text();

    console.log(
      "‚úÖ Svar mottaget fr√•n Gemini:",
      text.substring(0, 100) + "..."
    );

    return text;
  } catch (error) {
    console.error("‚ùå Gemini API error:", error);
    console.error("Error details:", {
      message: error instanceof Error ? error.message : "Unknown error",
      type: error instanceof Error ? error.constructor.name : typeof error,
      stack: error instanceof Error ? error.stack : undefined,
    });

    // Handle specific error cases
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";

    if (errorMessage.includes("API_KEY") || errorMessage.includes("API key")) {
      throw new Error(
        "API-nyckeln √§r ogiltig. Kontrollera VITE_GEMINI_API_KEY i .env-filen."
      );
    }

    if (errorMessage.includes("quota") || errorMessage.includes("429")) {
      throw new Error(
        "API-kvoten √§r √∂verskriden. F√∂rs√∂k igen senare eller kontakta support."
      );
    }

    if (errorMessage.includes("403") || errorMessage.includes("permission")) {
      throw new Error(
        "API-nyckeln har inte r√§tt beh√∂righeter. Kontrollera att nyckeln √§r aktiverad f√∂r Generative Language API."
      );
    }

    throw new Error(`Kunde inte f√• svar fr√•n AI-assistenten: ${errorMessage}`);
  }
};

// Helper function to check if API is configured
export const isGeminiConfigured = (): boolean => {
  return !!API_KEY;
};
